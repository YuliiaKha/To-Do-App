import { Observable } from 'rxjs';
export function openDatabase(indexedDB, dbName, version, upgradeCallback) {
    return new Promise((resolve, reject) => {
        if (!indexedDB) {
            reject('IndexedDB not available');
        }
        const request = indexedDB.open(dbName, version);
        let db;
        request.onsuccess = (event) => {
            db = request.result;
            resolve(db);
        };
        request.onerror = (event) => {
            reject(`IndexedDB error: ${request.error}`);
        };
        if (typeof upgradeCallback === 'function') {
            request.onupgradeneeded = (event) => {
                upgradeCallback(event, db);
            };
        }
    });
}
export async function CreateObjectStore(indexedDB, dbName, version, storeSchemas, migrationFactory) {
    return new Promise((resolve, reject) => {
        if (!indexedDB) {
            return;
        }
        const request = indexedDB.open(dbName, version);
        request.onupgradeneeded = async (event) => {
            const database = event.target.result;
            const storeCreationPromises = storeSchemas.map(async (storeSchema) => {
                if (!database.objectStoreNames.contains(storeSchema.store)) {
                    const objectStore = database.createObjectStore(storeSchema.store, storeSchema.storeConfig);
                    for (const schema of storeSchema.storeSchema) {
                        objectStore.createIndex(schema.name, schema.keypath, schema.options);
                    }
                }
            });
            await Promise.all(storeCreationPromises);
            const storeMigrations = migrationFactory && migrationFactory();
            if (storeMigrations) {
                const migrationKeys = Object.keys(storeMigrations)
                    .map((k) => parseInt(k, 10))
                    .filter((v) => v > event.oldVersion)
                    .sort((a, b) => a - b);
                for (const v of migrationKeys) {
                    storeMigrations[v](database, request.transaction);
                }
            }
            database.close();
            resolve();
        };
        request.onsuccess = (e) => {
            e.target.result.close();
            resolve();
        };
        request.onerror = (error) => {
            reject(error);
        };
    });
}
export function DeleteObjectStore(dbName, version, storeName) {
    if (!dbName || !version || !storeName) {
        throw Error('Params: "dbName", "version", "storeName" are mandatory.');
    }
    return new Observable((obs) => {
        try {
            const newVersion = version + 1;
            const request = indexedDB.open(dbName, newVersion);
            request.onupgradeneeded = (event) => {
                const database = event.target.result;
                database.deleteObjectStore(storeName);
                database.close();
                console.log('onupgradeneeded');
                obs.next(true);
                obs.complete();
            };
            request.onerror = (e) => obs.error(e);
        }
        catch (error) {
            obs.error(error);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,